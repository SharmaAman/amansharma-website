let currentImageIndex = 0;let images = [];function openLightbox(imgElement) {const lightbox = document.querySelector('.lightbox');const lightboxImg = lightbox.querySelector('img');lightboxImg.src = imgElement.src;lightbox.classList.add('active');document.body.style.overflow = 'hidden';images = Array.from(document.querySelectorAll('.photo-grid img'));currentImageIndex = images.indexOf(imgElement);lightbox.addEventListener('touchstart',handleTouchStart,false);lightbox.addEventListener('touchmove',handleTouchMove,false);} function closeLightbox() {const lightbox = document.querySelector('.lightbox');lightbox.classList.remove('active');document.body.style.overflow = 'auto';lightbox.removeEventListener('touchstart',handleTouchStart,false);lightbox.removeEventListener('touchmove',handleTouchMove,false);} let xDown = null;let yDown = null;function handleTouchStart(event) {const firstTouch = event.touches[0];xDown = firstTouch.clientX;yDown = firstTouch.clientY;} function handleTouchMove(event) {if (!xDown || !yDown) {return;} const xUp = event.touches[0].clientX;const yUp = event.touches[0].clientY;const xDiff = xDown - xUp;const yDiff = yDown - yUp;if (Math.abs(xDiff) > Math.abs(yDiff)) {if (xDiff > 0) {showNextImage();} else {showPreviousImage();}} else {if (yDiff > 0) {closeLightbox();} else {closeLightbox();}} xDown = null;yDown = null;}https: function showNextImage() {currentImageIndex = (currentImageIndex + 1) % images.length;const lightboxImg = document.querySelector('.lightbox img');lightboxImg.src = images[currentImageIndex].src;} function showPreviousImage() {currentImageIndex = (currentImageIndex - 1 + images.length) % images.length;const lightboxImg = document.querySelector('.lightbox img');lightboxImg.src = images[currentImageIndex].src;} document.addEventListener('keydown',(e) => {if (e.key === 'Escape') closeLightbox();});const observer = new IntersectionObserver((entries) => {entries.forEach(entry => {if (entry.isIntersecting) {entry.target.style.opacity = 1;entry.target.style.transform = 'translateY(0)';}});});document.querySelectorAll('.content-section').forEach((el) => {el.style.opacity = 0;el.style.transform = 'translateY(20px)';observer.observe(el);});function handleNavLinkClick(event) {const navLinks = document.querySelectorAll('.nav-link');const targetLink = event.currentTarget;navLinks.forEach(link => {link.classList.remove('active');});targetLink.classList.add('active');} document.addEventListener('DOMContentLoaded',function () {const navLinks = document.querySelectorAll('.nav-link');navLinks.forEach(link => {link.addEventListener('click',handleNavLinkClick);});const currentPage = window.location.pathname.split('/').pop() || 'index.html';navLinks.forEach(link => {const linkPage = link.getAttribute('href').split('/').pop();if (linkPage === currentPage || (currentPage === '' && linkPage === 'index.html')) {link.classList.add('active');}});});function loadContent(url) {fetch(url) .then(response => response.text()) .then(html => {const parser = new DOMParser();const doc = parser.parseFromString(html,'text/html');const newContent = doc.querySelector('main').innerHTML;document.querySelector('main').innerHTML = newContent;updateActiveLink(url);}) .catch(error => console.error('Error loading content:',error));} function updateActiveLink(url) {const navLinks = document.querySelectorAll('.nav-link');navLinks.forEach(link => {const linkPage = link.getAttribute('href').split('/').pop();const currentPage = url.split('/').pop();if (linkPage === currentPage) {link.classList.add('active');} else {link.classList.remove('active');}});} document.addEventListener('DOMContentLoaded',function () {const navLinks = document.querySelectorAll('.nav-link');navLinks.forEach(link => {link.addEventListener('click',function (event) {event.preventDefault();const targetPage = link.getAttribute('href');history.pushState(null,'',targetPage);loadContent(targetPage);});});window.addEventListener('popstate',function () {loadContent(window.location.pathname);});const currentPage = window.location.pathname.split('/').pop() || 'index.html';updateActiveLink(currentPage);});document.addEventListener('DOMContentLoaded',function () {const lazyImages = document.querySelectorAll('.lazy-load');const lazyLoad = (image) => {const src = image.getAttribute('data-src');if (!src) return;image.src = src;image.classList.add('loaded');image.removeAttribute('data-src');};const lazyImageObserver = new IntersectionObserver((entries,observer) => {entries.forEach((entry) => {if (entry.isIntersecting) {lazyLoad(entry.target);observer.unobserve(entry.target);}});},{rootMargin: '0px 0px 200px 0px',});lazyImages.forEach((image) => {lazyImageObserver.observe(image);});});